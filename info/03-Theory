SOLID
- Single-responsibility Principle
A class should have one and only one reason to change, meaning that a class should have only one job.
- Open-closed Principle
Objects or entities should be open for extension, but closed for modification.
- Liskov substitution principle
Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.
All this is stating is that every subclass/derived class should be substitutable for their base/parent class.
- Interface segregation principle
A client should never be forced to implement an interface that it doesn't use or clients shouldn't be forced to depend on methods they do not use.
- Dependency Inversion principle
Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.

https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design

LOS TESTS SON CÓDIGO!!!

CYCLOMATIC COMPLEXITY
Cyclomatic complexity (CYC) is a metric for software quality. It was developed by Thomas J. McCabe Sr. in 1976. 
In its simplest form, CYC is a count of the number of decisions in the source code. The higher the count, the more complex the code. 

Complejidad Ciclomática	Evaluación del Riesgo
1-10	Programa Simple, sin mucho riesgo
11-20	Más complejo, riesgo moderado
21-50	Complejo, Programa de alto riesgo
50		Programa no testeable, Muy alto riesgo

https://www.perforce.com/blog/qac/what-cyclomatic-complexity


CODE SMELLS (Hediondez del código)
https://en.wikipedia.org/wiki/Code_smell